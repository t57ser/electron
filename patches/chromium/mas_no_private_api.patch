From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Cheng Zhao <zcbenz@gmail.com>
Date: Tue, 9 Oct 2018 10:36:20 -0700
Subject: mas: avoid some private APIs

Guard usages in blink of private Mac APIs by MAS_BUILD, so they can be
excluded for people who want to submit their apps to the Mac App store.

diff --git a/content/browser/accessibility/accessibility_tree_formatter_mac.mm b/content/browser/accessibility/accessibility_tree_formatter_mac.mm
index 4bdefce738229f76f8fc9998733314284f5fa97a..699bf65a0e39a09d8689e85a55c203729b2f7e7e 100644
--- a/content/browser/accessibility/accessibility_tree_formatter_mac.mm
+++ b/content/browser/accessibility/accessibility_tree_formatter_mac.mm
@@ -289,7 +289,7 @@
       return PopulateSize([value sizeValue]);
     }
   }
-
+#ifndef MAS_BUILD
   // AXTextMarker
   if (content::IsAXTextMarker(value)) {
     return PopulateTextPosition(content::AXTextMarkerToAXPosition(value),
@@ -300,6 +300,7 @@
   if (content::IsAXTextMarkerRange(value)) {
     return PopulateTextMarkerRange(value, line_indexer);
   }
+#endif
 
   // AXValue
   if (CFGetTypeID(value) == AXValueGetTypeID()) {
@@ -419,7 +420,7 @@
                     AXMakeConst(affinity));
   return set;
 }
-
+#ifndef MAS_BUILD
 base::Value AccessibilityTreeFormatterMac::PopulateTextMarkerRange(
     id marker_range,
     const LineIndexer* line_indexer) const {
@@ -435,7 +436,7 @@
                PopulateTextPosition(ax_range.focus()->Clone(), line_indexer));
   return dict;
 }
-
+#endif
 base::Value AccessibilityTreeFormatterMac::PopulateArray(
     NSArray* node_array,
     const LineIndexer* line_indexer) const {
diff --git a/content/browser/accessibility/accessibility_tree_formatter_utils_mac.h b/content/browser/accessibility/accessibility_tree_formatter_utils_mac.h
index f1a82347e5c982609b8dcad10b969d332a665b30..26ab7745450cc807761026a677c435db900cdbd9 100644
--- a/content/browser/accessibility/accessibility_tree_formatter_utils_mac.h
+++ b/content/browser/accessibility/accessibility_tree_formatter_utils_mac.h
@@ -133,12 +133,14 @@ class CONTENT_EXPORT AttributeInvoker final {
       const ui::AXPropertyNode&,
       bool log_failure = true) const;
 
+#ifndef MAS_BUILD
   id DictNodeToTextMarker(const ui::AXPropertyNode&,
                           bool log_failure = true) const;
   id PropertyNodeToTextMarker(const ui::AXPropertyNode&,
                               bool log_failure = true) const;
   id PropertyNodeToTextMarkerRange(const ui::AXPropertyNode&,
                                    bool log_failure = true) const;
+#endif
 
   gfx::NativeViewAccessible LineIndexToNode(
       const std::u16string line_index) const;
diff --git a/content/browser/accessibility/accessibility_tree_formatter_utils_mac.mm b/content/browser/accessibility/accessibility_tree_formatter_utils_mac.mm
index 37d54fb830e039077375d1d0c1aefea9bafebc2e..68148b48610d13a89a3afad58a034001ea120712 100644
--- a/content/browser/accessibility/accessibility_tree_formatter_utils_mac.mm
+++ b/content/browser/accessibility/accessibility_tree_formatter_utils_mac.mm
@@ -178,9 +178,11 @@
   if (IsBrowserAccessibilityCocoa(target) || IsAXUIElement(target))
     return InvokeForAXElement(target, property_node);
 
+#ifndef MAS_BUILD
   if (content::IsAXTextMarkerRange(target)) {
     return InvokeForAXTextMarkerRange(target, property_node);
   }
+#endif
 
   if ([target isKindOfClass:[NSArray class]])
     return InvokeForArray(target, property_node);
@@ -383,6 +385,7 @@
       property_name == "AXTextMarkerRangeForUIElement") {  // UIElement
     return OptionalNSObject::NotNilOrError(PropertyNodeToUIElement(arg_node));
   }
+#ifndef MAS_BUILD
   if (property_name == "AXIndexForTextMarker" ||
       property_name == "AXNextWordEndTextMarkerForTextMarker" ||
       property_name ==
@@ -394,6 +397,7 @@
     return OptionalNSObject::NotNilOrError(
         PropertyNodeToTextMarkerRange(arg_node));
   }
+#endif
 
   return OptionalNSObject::NotApplicable();
 }
@@ -406,6 +410,7 @@
     return value;
 
   // NSRange
+#ifndef MAS_BUILD
   value = PropertyNodeToRange(property_node, false);
   if (value)
     return value;
@@ -422,6 +427,10 @@
 
   // TextMarkerRange
   return PropertyNodeToTextMarkerRange(property_node, false);
+#else
+
+  return PropertyNodeToRange(property_node, false);
+#endif
 }
 
 // NSNumber. Format: integer.
@@ -532,6 +541,7 @@
   return uielement;
 }
 
+#ifndef MAS_BUILD
 id AttributeInvoker::DictNodeToTextMarker(const AXPropertyNode& dictnode,
                                           bool log_failure) const {
   if (!dictnode.IsDict()) {
@@ -577,6 +587,7 @@
   return content::AXTextMarkerFrom(anchor_cocoa, *offset, affinity);
 }
 
+#ifndef MAS_BUILD
 id AttributeInvoker::PropertyNodeToTextMarker(const AXPropertyNode& dictnode,
                                               bool log_failure) const {
   return DictNodeToTextMarker(dictnode, log_failure);
@@ -621,6 +632,7 @@
 
   return content::AXTextMarkerRangeFrom(anchor_textmarker, focus_textmarker);
 }
+#endif
 
 OptionalNSObject TextMarkerRangeGetStartMarker(const OptionalNSObject& obj) {
   if (!IsAXTextMarkerRange(*obj))
@@ -660,6 +672,7 @@ OptionalNSObject TextMarkerRangeGetEndMarker(const OptionalNSObject& obj) {
   return OptionalNSObject::NotNilOrError(content::AXTextMarkerFrom(
       cocoa_node, range.focus()->text_offset(), range.focus()->affinity()));
 }
+#endif
 
 OptionalNSObject MakePairArray(const OptionalNSObject& obj1,
                                const OptionalNSObject& obj2) {
diff --git a/content/browser/accessibility/browser_accessibility_cocoa.h b/content/browser/accessibility/browser_accessibility_cocoa.h
index 0282b3c04cf0281820b716d0991af5ac4d6304de..ad0da68df963cc0872dc545ef525128ff0f8a0b0 100644
--- a/content/browser/accessibility/browser_accessibility_cocoa.h
+++ b/content/browser/accessibility/browser_accessibility_cocoa.h
@@ -157,7 +157,9 @@ id AXTextMarkerRangeFrom(id anchor_text_marker, id focus_text_marker);
 @property(nonatomic, readonly) NSNumber* enabled;
 // Returns a text marker that points to the last character in the document that
 // can be selected with Voiceover.
+#ifndef MAS_BUILD
 @property(nonatomic, readonly) id endTextMarker;
+#endif
 @property(nonatomic, readonly) NSNumber* expanded;
 @property(nonatomic, readonly) NSNumber* focused;
 @property(nonatomic, readonly) NSNumber* grabbed;
@@ -169,7 +171,9 @@ id AXTextMarkerRangeFrom(id anchor_text_marker, id focus_text_marker);
 // Index of a row, column, or tree item.
 @property(nonatomic, readonly) NSNumber* index;
 @property(nonatomic, readonly) NSNumber* treeItemRowIndex;
+#ifndef MAS_BUILD
 @property(nonatomic, readonly) NSNumber* insertionPointLineNumber;
+#endif
 @property(nonatomic, readonly) NSString* invalid;
 @property(nonatomic, readonly) NSNumber* isMultiSelectable;
 @property(nonatomic, readonly) NSNumber* loaded;
@@ -191,14 +195,18 @@ id AXTextMarkerRangeFrom(id anchor_text_marker, id focus_text_marker);
 // The object is selected as a whole.
 @property(nonatomic, readonly) NSNumber* selected;
 @property(nonatomic, readonly) NSArray* selectedChildren;
+#ifndef MAS_BUILD
 @property(nonatomic, readonly) NSString* selectedText;
 @property(nonatomic, readonly) NSValue* selectedTextRange;
 @property(nonatomic, readonly) id selectedTextMarkerRange;
+#endif
 @property(nonatomic, readonly) NSValue* size;
 @property(nonatomic, readonly) NSString* sortDirection;
 // Returns a text marker that points to the first character in the document that
 // can be selected with Voiceover.
+#ifndef MAS_BUILD
 @property(nonatomic, readonly) id startTextMarker;
+#endif
 // A string indicating the subrole of this object as far as accessibility
 // is concerned.
 @property(nonatomic, readonly) NSString* subrole;
diff --git a/content/browser/accessibility/browser_accessibility_cocoa.mm b/content/browser/accessibility/browser_accessibility_cocoa.mm
index 06e0766c6023768dc88f4d7deb28b1960c594ebb..980b855b6c52bdc39bf9e79e2b1618bd5d31c0cb 100644
--- a/content/browser/accessibility/browser_accessibility_cocoa.mm
+++ b/content/browser/accessibility/browser_accessibility_cocoa.mm
@@ -206,6 +206,7 @@
 NSString* const NSAccessibilityLengthForTextMarkerRangeParameterizedAttribute =
     @"AXLengthForTextMarkerRange";
 
+#ifndef MAS_BUILD
 // Private attributes that can be used for testing text markers, e.g. in dump
 // tree tests.
 NSString* const
@@ -217,6 +218,7 @@
 NSString* const
     NSAccessibilityTextMarkerNodeDebugDescriptionParameterizedAttribute =
         @"AXTextMarkerNodeDebugDescription";
+#endif
 
 // Other private attributes.
 NSString* const NSAccessibilityIdentifierChromeAttribute = @"ChromeAXNodeId";
@@ -241,6 +243,7 @@
 // VoiceOver uses -1 to mean "no limit" for AXResultsLimit.
 const int kAXResultsLimitNoLimit = -1;
 
+#ifndef MAS_BUILD
 extern "C" {
 
 // The following are private accessibility APIs required for cursor navigation
@@ -479,6 +482,7 @@ void AddMisspelledTextAttributes(const BrowserAccessibility::AXRange& ax_range,
   AddMisspelledTextAttributes(ax_range, attributed_text);
   return attributed_text;
 }
+#endif
 
 // Returns an autoreleased copy of the AXNodeData's attribute.
 NSString* NSStringForStringAttribute(BrowserAccessibility* browserAccessibility,
@@ -755,6 +759,7 @@ bool IsSelectedStateRelevant(BrowserAccessibility* item) {
          0 == strcmp([value objCType], @encode(NSRange));
 }
 
+#ifndef MAS_BUILD
 bool content::IsAXTextMarker(id object) {
   if (object == nil)
     return false;
@@ -798,6 +803,7 @@ bool IsSelectedStateRelevant(BrowserAccessibility* item) {
       kCFAllocatorDefault, anchor_textmarker, focus_textmarker);
   return [static_cast<id>(cf_marker_range) autorelease];
 }
+#endif
 
 @implementation BrowserAccessibilityCocoa
 
@@ -838,7 +844,9 @@ + (void)initialize {
       {NSAccessibilityEditableAncestorAttribute, @"editableAncestor"},
       {NSAccessibilityElementBusyAttribute, @"elementBusy"},
       {NSAccessibilityEnabledAttribute, @"enabled"},
+#ifndef MAS_BUILD
       {NSAccessibilityEndTextMarkerAttribute, @"endTextMarker"},
+#endif
       {NSAccessibilityExpandedAttribute, @"expanded"},
       {NSAccessibilityFocusableAncestorAttribute, @"focusableAncestor"},
       {NSAccessibilityFocusedAttribute, @"focused"},
@@ -850,8 +858,10 @@ + (void)initialize {
       {NSAccessibilityHighestEditableAncestorAttribute,
        @"highestEditableAncestor"},
       {NSAccessibilityIndexAttribute, @"index"},
+#ifndef MAS_BUILD
       {NSAccessibilityInsertionPointLineNumberAttribute,
        @"insertionPointLineNumber"},
+#endif
       {NSAccessibilityInvalidAttribute, @"invalid"},
       {NSAccessibilityIsMultiSelectableAttribute, @"isMultiSelectable"},
       {NSAccessibilityLanguageAttribute, @"language"},
@@ -873,13 +883,17 @@ + (void)initialize {
       {NSAccessibilityRowsAttribute, @"rows"},
       // TODO(aboxhall): expose
       // NSAccessibilityServesAsTitleForUIElementsAttribute
+#ifndef MAS_BUILD
       {NSAccessibilityStartTextMarkerAttribute, @"startTextMarker"},
+#endif
       {NSAccessibilitySelectedAttribute, @"selected"},
       {NSAccessibilitySelectedChildrenAttribute, @"selectedChildren"},
+#ifndef MAS_BUILD
       {NSAccessibilitySelectedTextAttribute, @"selectedText"},
       {NSAccessibilitySelectedTextRangeAttribute, @"selectedTextRange"},
       {NSAccessibilitySelectedTextMarkerRangeAttribute,
        @"selectedTextMarkerRange"},
+#endif
       {NSAccessibilitySizeAttribute, @"size"},
       {NSAccessibilitySortDirectionAttribute, @"sortDirection"},
       {NSAccessibilitySubroleAttribute, @"subrole"},
@@ -1411,6 +1425,7 @@ - (NSNumber*)enabled {
            ax::mojom::Restriction::kDisabled);
 }
 
+#ifndef MAS_BUILD
 // Returns a text marker that points to the last character in the document that
 // can be selected with VoiceOver.
 - (id)endTextMarker {
@@ -1419,6 +1434,7 @@ - (id)endTextMarker {
   BrowserAccessibility::AXPosition position = _owner->CreateTextPositionAt(0);
   return CreateTextMarker(position->CreatePositionAtEndOfContent());
 }
+#endif
 
 - (NSNumber*)expanded {
   if (![self instanceActive])
@@ -1619,6 +1635,7 @@ - (bool)findRowIndex:(BrowserAccessibilityCocoa*)toFind
   return false;
 }
 
+#ifndef MAS_BUILD
 - (NSNumber*)AXInsertionPointLineNumber {
   return [self insertionPointLineNumber];
 }
@@ -1648,6 +1665,7 @@ - (NSNumber*)insertionPointLineNumber {
                        caretPosition->AsTextPosition()->text_offset());
   return @(std::distance(lineBreaks.begin(), iterator));
 }
+#endif
 
 // Returns whether or not this node should be ignored in the
 // accessibility tree.
@@ -1998,8 +2016,12 @@ - (BOOL)shouldExposeTitleUIElement {
       return content::AXTextEdit(newValue, std::u16string(), nil);
     }
   }
+#ifndef MAS_BUILD
   return content::AXTextEdit(insertedText, deletedText,
                              CreateTextMarker(_owner->CreateTextPositionAt(i)));
+#else
+  return content::AXTextEdit(insertedText, deletedText, nil);
+#endif
 }
 
 // internal
@@ -2328,6 +2350,7 @@ - (NSArray*)selectedChildren {
   return ret;
 }
 
+#ifndef MAS_BUILD
 - (NSString*)AXSelectedText {
   return [self selectedText];
 }
@@ -2376,7 +2399,9 @@ - (NSValue*)selectedTextRange {
   int selLength = range.GetText().length();
   return [NSValue valueWithRange:NSMakeRange(selStart, selLength)];
 }
+#endif
 
+#ifndef MAS_BUILD
 - (id)selectedTextMarkerRange {
   if (![self instanceActive])
     return nil;
@@ -2388,6 +2413,7 @@ - (id)selectedTextMarkerRange {
   // words correctly.
   return CreateTextMarkerRange(ax_range.AsBackwardRange());
 }
+#endif
 
 - (NSValue*)size {
   if (![self instanceActive])
@@ -2420,6 +2446,7 @@ - (NSString*)sortDirection {
   return nil;
 }
 
+#ifndef MAS_BUILD
 // Returns a text marker that points to the first character in the document that
 // can be selected with VoiceOver.
 - (id)startTextMarker {
@@ -2428,6 +2455,7 @@ - (id)startTextMarker {
   BrowserAccessibility::AXPosition position = _owner->CreateTextPositionAt(0);
   return CreateTextMarker(position->CreatePositionAtStartOfContent());
 }
+#endif
 
 - (NSString*)AXSubrole {
   return [self subrole];
@@ -2771,12 +2799,14 @@ - (NSAttributedString*)attributedValueForRange:(NSRange)range {
   NSMutableAttributedString* attributedInnerText =
       [[[NSMutableAttributedString alloc]
           initWithString:base::SysUTF16ToNSString(innerText)] autorelease];
+#ifndef MAS_BUILD
   if (!_owner->IsText()) {
     BrowserAccessibility::AXRange ax_range(
         _owner->CreateTextPositionAt(0),
         _owner->CreateTextPositionAt(static_cast<int>(innerText.length())));
     AddMisspelledTextAttributes(ax_range, attributedInnerText);
   }
+#endif
 
   return [attributedInnerText attributedSubstringFromRange:range];
 }
@@ -2908,6 +2938,7 @@ - (id)accessibilityAttributeValue:(NSString*)attribute
       return ToBrowserAccessibilityCocoa(cell);
   }
 
+#ifndef MAS_BUILD
   if ([attribute
           isEqualToString:
               NSAccessibilityUIElementForTextMarkerParameterizedAttribute]) {
@@ -3231,6 +3262,7 @@ - (id)accessibilityAttributeValue:(NSString*)attribute
 
     return CreateTextMarker(root->CreateTextPositionAt(index));
   }
+#endif
 
   if ([attribute isEqualToString:
                      NSAccessibilityBoundsForRangeParameterizedAttribute]) {
@@ -3261,6 +3293,7 @@ - (id)accessibilityAttributeValue:(NSString*)attribute
     return nil;
   }
 
+#ifndef MAS_BUILD
   if ([attribute
           isEqualToString:
               NSAccessibilityLineTextMarkerRangeForTextMarkerParameterizedAttribute]) {
@@ -3380,6 +3413,7 @@ - (id)accessibilityAttributeValue:(NSString*)attribute
 
     return @(child->GetIndexInParent());
   }
+#endif
 
   return nil;
 }
@@ -3946,6 +3980,7 @@ - (void)accessibilitySetValue:(id)value forAttribute:(NSString*)attribute {
               ->AsTextSelectionPosition()));
     }
   }
+#ifndef MAS_BUILD
   if ([attribute
           isEqualToString:NSAccessibilitySelectedTextMarkerRangeAttribute]) {
     BrowserAccessibility::AXRange range = CreateRangeFromTextMarkerRange(value);
@@ -3956,6 +3991,7 @@ - (void)accessibilitySetValue:(id)value forAttribute:(NSString*)attribute {
         range.anchor()->AsTextSelectionPosition(),
         range.focus()->AsTextSelectionPosition()));
   }
+#endif
 }
 
 - (id)accessibilityFocusedUIElement {
diff --git a/content/browser/accessibility/browser_accessibility_manager_mac.mm b/content/browser/accessibility/browser_accessibility_manager_mac.mm
index c4c0e0aaa1be36160152388a304bbc62d73cb01c..44dfc7394784c32e3f3c8bab7b6304229862ce3e 100644
--- a/content/browser/accessibility/browser_accessibility_manager_mac.mm
+++ b/content/browser/accessibility/browser_accessibility_manager_mac.mm
@@ -502,7 +502,7 @@ void PostAnnouncementNotification(NSString* announcement) {
   if (native_focus_object && [native_focus_object instanceActive]) {
     [user_info setObject:native_focus_object
                   forKey:ui::NSAccessibilityTextChangeElement];
-
+#ifndef MAS_BUILD
     id selected_text = [native_focus_object selectedTextMarkerRange];
     if (selected_text) {
       NSString* const NSAccessibilitySelectedTextMarkerRangeAttribute =
@@ -510,6 +510,7 @@ void PostAnnouncementNotification(NSString* announcement) {
       [user_info setObject:selected_text
                     forKey:NSAccessibilitySelectedTextMarkerRangeAttribute];
     }
+#endif
   }
 
   return user_info;
diff --git a/content/common/pseudonymization_salt.cc b/content/common/pseudonymization_salt.cc
index 28e003bef910abff022def659fe18d4cd0549f8a..530bcbdb5d350f6486dc1e8536f7b279be69e241 100644
--- a/content/common/pseudonymization_salt.cc
+++ b/content/common/pseudonymization_salt.cc
@@ -41,11 +41,13 @@ uint32_t GetPseudonymizationSalt() {
   uint32_t salt = g_salt.load();
 
   if (salt == 0) {
+#ifndef MAS_BUILD
 #if DCHECK_IS_ON()
     // Only the Browser process needs to initialize the `salt` on demand.
     // Other processes (identified via the IsProcessSandboxed heuristic) should
     // receive the salt from their parent processes.
     DCHECK(!sandbox::policy::Sandbox::IsProcessSandboxed());
+#endif
 #endif
     salt = InitializeSalt();
   }
diff --git a/content/renderer/renderer_main_platform_delegate_mac.mm b/content/renderer/renderer_main_platform_delegate_mac.mm
index 894ac47e596c1c96a7e0659be80ed8a5629d0304..eca797a24df79b8502b9698e6ed8830ad1c5cb59 100644
--- a/content/renderer/renderer_main_platform_delegate_mac.mm
+++ b/content/renderer/renderer_main_platform_delegate_mac.mm
@@ -10,9 +10,11 @@
 #include "sandbox/mac/seatbelt.h"
 #include "sandbox/mac/system_services.h"
 
+#ifndef MAS_BUILD
 extern "C" {
 CGError CGSSetDenyWindowServerConnections(bool);
 }
+#endif
 
 namespace content {
 
@@ -22,6 +24,7 @@
 // verifies there are no existing open connections), and then indicates that
 // Chrome should continue execution without access to launchservicesd.
 void DisableSystemServices() {
+#ifndef MAS_BUILD
   // Tell the WindowServer that we don't want to make any future connections.
   // This will return Success as long as there are no open connections, which
   // is what we want.
@@ -30,6 +33,7 @@ void DisableSystemServices() {
 
   sandbox::DisableLaunchServices();
   sandbox::DisableCoreServicesCheckFix();
+#endif
 }
 
 }  // namespace
diff --git a/content/renderer/theme_helper_mac.mm b/content/renderer/theme_helper_mac.mm
index c15f3a631292b538698625328fb429ee3c9964f5..37e038753ecf1b82ec92c06b2c0729b5328781c9 100644
--- a/content/renderer/theme_helper_mac.mm
+++ b/content/renderer/theme_helper_mac.mm
@@ -7,11 +7,11 @@
 #include <Cocoa/Cocoa.h>
 
 #include "base/strings/sys_string_conversions.h"
-
+#if !defined(MAS_BUILD)
 extern "C" {
 bool CGFontRenderingGetFontSmoothingDisabled(void) API_AVAILABLE(macos(10.14));
 }
-
+#endif
 namespace content {
 
 void SystemColorsDidChange(int aqua_color_variant,
@@ -59,8 +59,19 @@ void SystemColorsDidChange(int aqua_color_variant,
 bool IsSubpixelAntialiasingAvailable() {
   if (__builtin_available(macOS 10.14, *)) {
     // See https://trac.webkit.org/changeset/239306/webkit for more info.
+#if !defined(MAS_BUILD)
     return !CGFontRenderingGetFontSmoothingDisabled();
+#else
+    NSUserDefaults* defaults = [NSUserDefaults standardUserDefaults];
+    NSString *default_key = @"CGFontRenderingGetFontSmoothingDisabled";
+    // Check that key exists since boolForKey defaults to NO when the
+    // key is missing and this key in fact defaults to YES;
+    if ([defaults objectForKey:default_key] == nil)
+      return false;
+    return ![defaults boolForKey:default_key];
+#endif
   }
+
   return true;
 }
 
diff --git a/device/bluetooth/bluetooth_adapter_mac.mm b/device/bluetooth/bluetooth_adapter_mac.mm
index 91ed4a803558524223931d913ca9fd6dd00d7e37..b4c59d1ad7df77743dc4cc8f4e378b21f2b5e553 100644
--- a/device/bluetooth/bluetooth_adapter_mac.mm
+++ b/device/bluetooth/bluetooth_adapter_mac.mm
@@ -42,6 +42,7 @@
 #include "device/bluetooth/bluetooth_socket_mac.h"
 #include "device/bluetooth/public/cpp/bluetooth_address.h"
 
+#ifndef MAS_BUILD
 extern "C" {
 // Undocumented IOBluetooth Preference API [1]. Used by `blueutil` [2] and
 // `Karabiner` [3] to programmatically control the Bluetooth state. Calling the
@@ -55,6 +56,7 @@
 // [4] https://support.apple.com/kb/PH25091
 void IOBluetoothPreferenceSetControllerPowerState(int state);
 }
+#endif
 
 namespace {
 
@@ -123,8 +125,10 @@ CBCentralManagerState GetCBManagerState(CBCentralManager* manager) {
       controller_state_function_(
           base::BindRepeating(&BluetoothAdapterMac::GetHostControllerState,
                               base::Unretained(this))),
+#ifndef MAS_BUILD
       power_state_function_(
           base::BindRepeating(IOBluetoothPreferenceSetControllerPowerState)),
+#endif
       classic_discovery_manager_(
           BluetoothDiscoveryManagerMac::CreateClassic(this)),
       low_energy_discovery_manager_(
@@ -355,8 +359,12 @@ CBCentralManagerState GetCBManagerState(CBCentralManager* manager) {
 }
 
 bool BluetoothAdapterMac::SetPoweredImpl(bool powered) {
+#ifndef MAS_BUILD
   power_state_function_.Run(base::strict_cast<int>(powered));
   return true;
+#else
+  return false;
+#endif
 }
 
 void BluetoothAdapterMac::RemovePairingDelegateInternal(
diff --git a/media/audio/BUILD.gn b/media/audio/BUILD.gn
index 9c8628a08045c7793f088200b58b492b9f0581cf..1c5b6e85bce201fc13c34671b076176793ae053c 100644
--- a/media/audio/BUILD.gn
+++ b/media/audio/BUILD.gn
@@ -175,6 +175,12 @@ source_set("audio") {
       "mac/scoped_audio_unit.cc",
       "mac/scoped_audio_unit.h",
     ]
+    if (is_mas_build) {
+      sources -= [
+        "mac/coreaudio_dispatch_override.cc",
+        "mac/coreaudio_dispatch_override.h",
+      ]
+    }
     frameworks = [
       "AudioToolbox.framework",
       "AudioUnit.framework",
diff --git a/media/audio/mac/audio_manager_mac.cc b/media/audio/mac/audio_manager_mac.cc
index 2066a12b1940bcec87ab01e94cb63ea46b1c46db..d6e08b56420077bbdddd81c12a535fea62197aca 100644
--- a/media/audio/mac/audio_manager_mac.cc
+++ b/media/audio/mac/audio_manager_mac.cc
@@ -887,7 +887,7 @@ AudioParameters AudioManagerMac::GetPreferredOutputStreamParameters(
 
 void AudioManagerMac::InitializeOnAudioThread() {
   DCHECK(GetTaskRunner()->BelongsToCurrentThread());
-  InitializeCoreAudioDispatchOverride();
+  // InitializeCoreAudioDispatchOverride();
   power_observer_ = std::make_unique<AudioPowerObserver>();
 }
 
diff --git a/net/dns/dns_config_service_posix.cc b/net/dns/dns_config_service_posix.cc
index 1aef5a0d9d4cdfcb669118a4f7244819ff14ed39..e418ef18ed7e1855090f201ab2de9bc240643e84 100644
--- a/net/dns/dns_config_service_posix.cc
+++ b/net/dns/dns_config_service_posix.cc
@@ -140,8 +140,8 @@ class DnsConfigServicePosix::Watcher : public DnsConfigService::Watcher {
 
   bool Watch() override {
     CheckOnCorrectSequence();
-
     bool success = true;
+#ifndef MAS_BUILD
     if (!config_watcher_.Watch(base::BindRepeating(&Watcher::OnConfigChanged,
                                                    base::Unretained(this)))) {
       LOG(ERROR) << "DNS config watch failed to start.";
@@ -158,6 +158,7 @@ class DnsConfigServicePosix::Watcher : public DnsConfigService::Watcher {
       success = false;
     }
 #endif  // !defined(OS_IOS)
+#endif
     return success;
   }
 
diff --git a/sandbox/mac/sandbox_compiler.cc b/sandbox/mac/sandbox_compiler.cc
index e524aa7b851022abed1edac39e18d8d92e5349b4..718d3f963da5c1a15a1bdb0e6043f89bc0f940f8 100644
--- a/sandbox/mac/sandbox_compiler.cc
+++ b/sandbox/mac/sandbox_compiler.cc
@@ -28,6 +28,7 @@ bool SandboxCompiler::InsertStringParam(const std::string& key,
 }
 
 bool SandboxCompiler::CompileAndApplyProfile(std::string* error) {
+#ifndef MAS_BUILD
   char* error_internal = nullptr;
   std::vector<const char*> params;
 
@@ -44,6 +45,7 @@ bool SandboxCompiler::CompileAndApplyProfile(std::string* error) {
     sandbox::Seatbelt::FreeError(error_internal);
     return false;
   }
+#endif
   return true;
 }
 
diff --git a/sandbox/mac/seatbelt.cc b/sandbox/mac/seatbelt.cc
index e0c31170acd13c9997c6b1d04c6de1420feaf422..0e561f97b33380bfbe52e64c2c4a6988095e8074 100644
--- a/sandbox/mac/seatbelt.cc
+++ b/sandbox/mac/seatbelt.cc
@@ -64,7 +64,11 @@ void Seatbelt::FreeError(char* errorbuf) {
 
 // static
 bool Seatbelt::IsSandboxed() {
+#ifndef MAS_BUILD
   return ::sandbox_check(getpid(), NULL, 0);
+#else
+  return true;
+#endif
 }
 
 }  // namespace sandbox
diff --git a/sandbox/mac/seatbelt_extension.cc b/sandbox/mac/seatbelt_extension.cc
index d59a16112d27e2696437163483c44eca414c225c..1ccd20fe7efa3cbae48f99d0660b025283dd370e 100644
--- a/sandbox/mac/seatbelt_extension.cc
+++ b/sandbox/mac/seatbelt_extension.cc
@@ -11,6 +11,7 @@
 #include "base/notreached.h"
 #include "sandbox/mac/seatbelt_extension_token.h"
 
+#ifndef MAS_BUILD
 // libsandbox private API.
 extern "C" {
 extern const char* APP_SANDBOX_READ;
@@ -22,6 +23,7 @@ char* sandbox_extension_issue_file(const char* type,
                                    const char* path,
                                    uint32_t flags);
 }
+#endif
 
 namespace sandbox {
 
@@ -50,7 +52,11 @@ std::unique_ptr<SeatbeltExtension> SeatbeltExtension::FromToken(
 
 bool SeatbeltExtension::Consume() {
   DCHECK(!token_.empty());
+#ifndef MAS_BUILD
   handle_ = sandbox_extension_consume(token_.c_str());
+#else
+  handle_ = -1;
+#endif
   return handle_ > 0;
 }
 
@@ -62,7 +68,11 @@ bool SeatbeltExtension::ConsumePermanently() {
 }
 
 bool SeatbeltExtension::Revoke() {
+#ifndef MAS_BUILD
   int rv = sandbox_extension_release(handle_);
+#else
+  int rv = -1;
+#endif
   handle_ = 0;
   token_.clear();
   return rv == 0;
@@ -80,12 +90,14 @@ SeatbeltExtension::SeatbeltExtension(const std::string& token)
 char* SeatbeltExtension::IssueToken(SeatbeltExtension::Type type,
                                     const std::string& resource) {
   switch (type) {
+#ifndef MAS_BUILD
     case FILE_READ:
       return sandbox_extension_issue_file(APP_SANDBOX_READ, resource.c_str(),
                                           0);
     case FILE_READ_WRITE:
       return sandbox_extension_issue_file(APP_SANDBOX_READ_WRITE,
                                           resource.c_str(), 0);
+#endif
     default:
       NOTREACHED();
       return nullptr;
